datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                    String                    @id @default(uuid())
  name                  String                    @unique
  email                 String                    @unique
  password              String
  emailVerified         Boolean                   @default(false)
  verificationOtp       String?
  otpExpiry             DateTime?
  resetToken            String?
  resetTokenExpiry      DateTime?
  avatar                String?
  isOnline              Boolean                   @default(false)
  lastSeen              DateTime                  @default(now())
  createdAt             DateTime                  @default(now())
  updatedAt             DateTime                  @updatedAt
  sessions              Session[]
  messages              Message[]
  received              Message[]                 @relation("ReceivedMessages")
  conversations         ConversationParticipant[]
  calls                 CallParticipant[]
  initiatedCalls        Call[]                    @relation("UserInitiatedCalls")

  @@index([email])
  @@index([verificationOtp])
}

model Session {
  id        String   @id @default(uuid())
  socketId  String   @unique
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
}

model Conversation {
  id        String   @id @default(uuid())
  type      ConversationType @default(DIRECT)
  createdAt DateTime @default(now())

  participants ConversationParticipant[]
  messages     Message[]
  calls        Call[]
}

enum ConversationType {
  DIRECT
  GROUP
}

model ConversationParticipant {
  id             String   @id @default(uuid())
  conversationId String
  userId         String

  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([conversationId, userId])
}

model Message {
  id             String   @id @default(uuid())
  conversationId String
  senderId       String
  recipientId    String?
  content        String
  type           MessageType @default(TEXT)
  createdAt      DateTime @default(now())

  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  sender         User         @relation(fields: [senderId], references: [id])
  recipient      User?        @relation("ReceivedMessages", fields: [recipientId], references: [id])

}

enum MessageType {
  TEXT
  IMAGE
  FILE
}

model Call {
  id             String   @id @default(uuid())
  conversationId String
  initiatorId    String
  type           CallType
  status         CallStatus @default(INITIATED)
  startedAt      DateTime @default(now())
  endedAt        DateTime?

  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  initiator      User         @relation("UserInitiatedCalls", fields: [initiatorId], references: [id])
  participants   CallParticipant[]
}

model CallParticipant {
  id        String   @id @default(uuid())
  callId    String
  userId    String
  joinedAt  DateTime @default(now())

  call      Call @relation(fields: [callId], references: [id], onDelete: Cascade)
  user      User @relation(fields: [userId], references: [id])

  @@unique([callId, userId])
}

enum CallType {
  VOICE
  VIDEO
}

enum CallStatus {
  INITIATED
  ACTIVE
  ENDED
}
